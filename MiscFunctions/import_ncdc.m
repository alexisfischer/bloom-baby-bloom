function [WBAN1,Date1,Time1,StationType1,SkyCondition1,SkyConditionFlag1,Visibility1,VisibilityFlag1,WeatherType1,WeatherTypeFlag1,DryBulbFarenheit1,DryBulbFarenheitFlag1,DryBulbCelsius1,DryBulbCelsiusFlag1,WetBulbFarenheit1,WetBulbFarenheitFlag1,WetBulbCelsius1,WetBulbCelsiusFlag1,DewPointFarenheit1,DewPointFarenheitFlag1,DewPointCelsius1,DewPointCelsiusFlag1,RelativeHumidity1,RelativeHumidityFlag1,WindSpeed1,WindSpeedFlag1,WindDirection1,WindDirectionFlag1,ValueForWindCharacter1,ValueForWindCharacterFlag1,StationPressure1,StationPressureFlag1,PressureTendency1,PressureTendencyFlag1,PressureChange1,PressureChangeFlag1,SeaLevelPressure1,SeaLevelPressureFlag1,RecordType1,RecordTypeFlag1,HourlyPrecip1,HourlyPrecipFlag1,Altimeter1,AltimeterFlag1] = import_ncdc(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [WBAN1,DATE1,TIME1,STATIONTYPE1,SKYCONDITION1,SKYCONDITIONFLAG1,VISIBILITY1,VISIBILITYFLAG1,WEATHERTYPE1,WEATHERTYPEFLAG1,DRYBULBFARENHEIT1,DRYBULBFARENHEITFLAG1,DRYBULBCELSIUS1,DRYBULBCELSIUSFLAG1,WETBULBFARENHEIT1,WETBULBFARENHEITFLAG1,WETBULBCELSIUS1,WETBULBCELSIUSFLAG1,DEWPOINTFARENHEIT1,DEWPOINTFARENHEITFLAG1,DEWPOINTCELSIUS1,DEWPOINTCELSIUSFLAG1,RELATIVEHUMIDITY1,RELATIVEHUMIDITYFLAG1,WINDSPEED1,WINDSPEEDFLAG1,WINDDIRECTION1,WINDDIRECTIONFLAG1,VALUEFORWINDCHARACTER1,VALUEFORWINDCHARACTERFLAG1,STATIONPRESSURE1,STATIONPRESSUREFLAG1,PRESSURETENDENCY1,PRESSURETENDENCYFLAG1,PRESSURECHANGE1,PRESSURECHANGEFLAG1,SEALEVELPRESSURE1,SEALEVELPRESSUREFLAG1,RECORDTYPE1,RECORDTYPEFLAG1,HOURLYPRECIP1,HOURLYPRECIPFLAG1,ALTIMETER1,ALTIMETERFLAG1]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [WBAN1,DATE1,TIME1,STATIONTYPE1,SKYCONDITION1,SKYCONDITIONFLAG1,VISIBILITY1,VISIBILITYFLAG1,WEATHERTYPE1,WEATHERTYPEFLAG1,DRYBULBFARENHEIT1,DRYBULBFARENHEITFLAG1,DRYBULBCELSIUS1,DRYBULBCELSIUSFLAG1,WETBULBFARENHEIT1,WETBULBFARENHEITFLAG1,WETBULBCELSIUS1,WETBULBCELSIUSFLAG1,DEWPOINTFARENHEIT1,DEWPOINTFARENHEITFLAG1,DEWPOINTCELSIUS1,DEWPOINTCELSIUSFLAG1,RELATIVEHUMIDITY1,RELATIVEHUMIDITYFLAG1,WINDSPEED1,WINDSPEEDFLAG1,WINDDIRECTION1,WINDDIRECTIONFLAG1,VALUEFORWINDCHARACTER1,VALUEFORWINDCHARACTERFLAG1,STATIONPRESSURE1,STATIONPRESSUREFLAG1,PRESSURETENDENCY1,PRESSURETENDENCYFLAG1,PRESSURECHANGE1,PRESSURECHANGEFLAG1,SEALEVELPRESSURE1,SEALEVELPRESSUREFLAG1,RECORDTYPE1,RECORDTYPEFLAG1,HOURLYPRECIP1,HOURLYPRECIPFLAG1,ALTIMETER1,ALTIMETERFLAG1]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [WBAN1,Date1,Time1,StationType1,SkyCondition1,SkyConditionFlag1,Visibility1,VisibilityFlag1,WeatherType1,WeatherTypeFlag1,DryBulbFarenheit1,DryBulbFarenheitFlag1,DryBulbCelsius1,DryBulbCelsiusFlag1,WetBulbFarenheit1,WetBulbFarenheitFlag1,WetBulbCelsius1,WetBulbCelsiusFlag1,DewPointFarenheit1,DewPointFarenheitFlag1,DewPointCelsius1,DewPointCelsiusFlag1,RelativeHumidity1,RelativeHumidityFlag1,WindSpeed1,WindSpeedFlag1,WindDirection1,WindDirectionFlag1,ValueForWindCharacter1,ValueForWindCharacterFlag1,StationPressure1,StationPressureFlag1,PressureTendency1,PressureTendencyFlag1,PressureChange1,PressureChangeFlag1,SeaLevelPressure1,SeaLevelPressureFlag1,RecordType1,RecordTypeFlag1,HourlyPrecip1,HourlyPrecipFlag1,Altimeter1,AltimeterFlag1]
%   = importfile('NCDC_2012_11.txt',7, 934);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2013/01/10 15:47:29

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 7;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = [dataArray{:,1:end-1}];
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,7,11,13,15,17,19,21,23,25,27,31,37,43]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,4,7,11,13,15,17,19,21,23,25,27,31,37,43]);
rawCellColumns = raw(:, [5,6,8,9,10,12,14,16,18,20,22,24,26,28,29,30,32,33,34,35,36,38,39,40,41,42,44]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
WBAN1 = cell2mat(rawNumericColumns(:, 1));
Date1 = cell2mat(rawNumericColumns(:, 2));
Time1 = cell2mat(rawNumericColumns(:, 3));
StationType1 = cell2mat(rawNumericColumns(:, 4));
SkyCondition1 = rawCellColumns(:, 1);
SkyConditionFlag1 = rawCellColumns(:, 2);
Visibility1 = cell2mat(rawNumericColumns(:, 5));
VisibilityFlag1 = rawCellColumns(:, 3);
WeatherType1 = rawCellColumns(:, 4);
WeatherTypeFlag1 = rawCellColumns(:, 5);
DryBulbFarenheit1 = cell2mat(rawNumericColumns(:, 6));
DryBulbFarenheitFlag1 = rawCellColumns(:, 6);
DryBulbCelsius1 = cell2mat(rawNumericColumns(:, 7));
DryBulbCelsiusFlag1 = rawCellColumns(:, 7);
WetBulbFarenheit1 = cell2mat(rawNumericColumns(:, 8));
WetBulbFarenheitFlag1 = rawCellColumns(:, 8);
WetBulbCelsius1 = cell2mat(rawNumericColumns(:, 9));
WetBulbCelsiusFlag1 = rawCellColumns(:, 9);
DewPointFarenheit1 = cell2mat(rawNumericColumns(:, 10));
DewPointFarenheitFlag1 = rawCellColumns(:, 10);
DewPointCelsius1 = cell2mat(rawNumericColumns(:, 11));
DewPointCelsiusFlag1 = rawCellColumns(:, 11);
RelativeHumidity1 = cell2mat(rawNumericColumns(:, 12));
RelativeHumidityFlag1 = rawCellColumns(:, 12);
WindSpeed1 = cell2mat(rawNumericColumns(:, 13));
WindSpeedFlag1 = rawCellColumns(:, 13);
WindDirection1 = cell2mat(rawNumericColumns(:, 14));
WindDirectionFlag1 = rawCellColumns(:, 14);
ValueForWindCharacter1 = rawCellColumns(:, 15);
ValueForWindCharacterFlag1 = rawCellColumns(:, 16);
StationPressure1 = cell2mat(rawNumericColumns(:, 15));
StationPressureFlag1 = rawCellColumns(:, 17);
PressureTendency1 = rawCellColumns(:, 18);
PressureTendencyFlag1 = rawCellColumns(:, 19);
PressureChange1 = rawCellColumns(:, 20);
PressureChangeFlag1 = rawCellColumns(:, 21);
SeaLevelPressure1 = cell2mat(rawNumericColumns(:, 16));
SeaLevelPressureFlag1 = rawCellColumns(:, 22);
RecordType1 = rawCellColumns(:, 23);
RecordTypeFlag1 = rawCellColumns(:, 24);
HourlyPrecip1 = rawCellColumns(:, 25);
HourlyPrecipFlag1 = rawCellColumns(:, 26);
Altimeter1 = cell2mat(rawNumericColumns(:, 17));
AltimeterFlag1 = rawCellColumns(:, 27);

