%% Find topclasses for each seascape
clear;

filepath='C:\Users\ifcbuser\Documents\GitHub\bloom-baby-bloom\';
addpath(genpath('D:\Shimada\data\')); 
addpath(genpath('D:\BuddInlet\data\')); 
addpath(genpath(filepath)); 
addpath(genpath('C:\Users\ifcbuser\Documents\GitHub\ifcb-analysis\')); 
load([filepath 'NOAA/SeascapesProject/Data/SeascapeSummary_NOAA-OSU-UCSC'],'S');

manualpath = 'D:\general\classifier\manual_merged\'; % manual annotation file location
result_path = [filepath 'NOAA\SeascapesProject\Data\']; 

% get class2use
filelist = dir([manualpath 'D*.mat']);
load([manualpath filelist(1).name],'class2use_manual') %read first file to get classes
numclass = length(class2use_manual);
class2use_manual_first = class2use_manual; 

% match seascapes with cell abundance from manual files
filelistSS=S.filename;
classcount = NaN(length(filelistSS),numclass);  %initialize output
ml_analyzed = NaN(length(filelistSS),1); %initialize output
for filecount = 1:length(filelistSS)   
    filename=char(filelistSS(filecount));     

    if contains(filename,{'IFCB777','IFCB117'})
        datapath = 'D:\Shimada\data\';                
        hdrname = [datapath filename(2:5) filesep filename(1:9) filesep regexprep(filename, 'mat', 'hdr')]; 
        ml_analyzed(filecount) = IFCB_volume_analyzed(hdrname);         
    elseif contains(filename,'IFCB150')
        datapath = 'D:\BuddInlet\data\';          
        hdrname = [datapath filename(2:5) filesep filename(1:9) filesep regexprep(filename, 'mat', 'hdr')]; 
        ml_analyzed(filecount) = IFCB_volume_analyzed(hdrname); 
    elseif contains(filename,'IFCB122')
        datapath = 'D:\OSU\data\';          
        hdrname = [datapath filename(2:5) filesep filename(1:9) filesep regexprep(filename, 'mat', 'hdr')]; 
        ml_analyzed(filecount) = IFCB_volume_analyzed(hdrname);     
    else
        ml_analyzed(filecount)=5; %temporary fix until get OSU and UCSC data           
    end

    [~,~,idx]=intersect(filename,({filelist.name})');        
    if ~isempty(idx)
        S.manual(filecount)=1;     
        load([manualpath char(filename)],'class2use_manual','classlist')
        if ~isequal(class2use_manual, class2use_manual_first)
            [t,ii] = min([length(class2use_manual_first), length(class2use_manual)]);
            if ~isequal(class2use_manual(1:t), class2use_manual_first(1:t))
                disp('class2use_manual does not match previous files!!!')
                keyboard
            else
                if ii == 1, class2use_manual_first = class2use_manual; end %new longest list
            end
        end
        for classnum = 1:numclass
            classcount(filecount,classnum) = size(find(classlist(:,2) == classnum),1); %manual only
        end
        clear class2use_manual classlist

    else
        disp([(filename) ' NO matching file']);
        S.manual(filecount)=0;
    end

end

matdate=S.dt;
seascape=S.ss;
class2use = class2use_manual_first;
filelist=filelistSS;

%% tally of files with different seascapes across dataset
%NOAA 
id1=find(S.manual==1 & S.ifcb==117);
id2=find(S.manual==1 & S.ifcb==777);
id3=find(S.manual==1 & S.ifcb==150);

N.total=length(dir('D:\Shimada\data\**\*.hdr'));
N.ss=length(find(S.ifcb==117 | S.ifcb==777 | S.ifcb==150));
N.manual=length(dir('D:\Shimada\manual\*.mat'));
N.manualss=length([id1;id2;id3]);

%OSU
O.manual=length(dir('D:\OSU\manual\*.mat'));
O.manualss=length(find(S.manual==1 & S.ifcb==122));

%UCSC
U.manual=length(dir('D:\SCW\manual\*.mat'));
U.manualss=length(find(S.manual==1 & S.ifcb==104));

save([result_path 'seascape_count_class_manual'],'matdate','seascape',...
    'ml_analyzed','classcount','filelist','class2use','N','O','U')

%% Find topclasses for each seascape
clear;
filepath='~/Documents/MATLAB/bloom-baby-bloom/'; 
addpath(genpath(filepath)); 

load([filepath 'NOAA/SeascapesProject/Data/seascape_count_class_manual'],'seascape',...
    'ml_analyzed','classcount','filelist','class2use');

%find top seascapes, 100 file occurences
[gc,ss]=groupcounts(seascape);
topSS=ss(gc>100); 

% remove files without annotations
idx=isnan(classcount(:,1));
classcount(idx,:)=[]; filelist(idx)=[]; seascape(idx)=[]; ml_analyzed(idx)=[];

% Exclude nonliving, larvae, zooplankton, and unclassified
classcount(:,get_class_ind(class2use,'nonliving',filepath))=NaN;
classcount(:,get_class_ind(class2use,'larvae',filepath))=NaN;
classcount(:,get_class_ind(class2use,'zooplankton',filepath))=NaN;
classcount(:,strcmp('unclassified',class2use))=NaN;
classcount(:,strcmp('flagellate',class2use))=NaN;
classcount(:,strcmp('Dinophyceae_pointed',class2use))=NaN;
classcount(:,strcmp('Dinophyceae_round',class2use))=NaN;

% merge species of Pseudo-nitzschia, Dinophysis, Chaetoceros, Thalassiosira classes,
idx=contains(class2use,'Dinophysis');
temp=sum(classcount(:,idx),2,'omitnan'); classcount(:,idx)=NaN;
classcount(:,strcmp('Dinophysis',class2use))=temp;

idx=contains(class2use,'Pseudo-nitzschia');
temp=sum(classcount(:,idx),2,'omitnan'); classcount(:,idx)=NaN;
classcount(:,strcmp('Pseudo-nitzschia',class2use))=temp;

idx=contains(class2use,'Chaetoceros');
temp=sum(classcount(:,idx),2,'omitnan'); classcount(:,idx)=NaN;
classcount(:,strcmp('Chaetoceros_chain',class2use))=temp;

idx=contains(class2use,'Thalassiosira');
temp=sum(classcount(:,idx),2,'omitnan'); classcount(:,idx)=NaN;
classcount(:,strcmp('Thalassiosira_chain',class2use))=temp;

% find top classes and summarize each seascape
num=30;
for i=1:length(topSS)
    idx=find(seascape==topSS(i)); %indices of a particular ss
    counttemp=classcount(idx,:);
    sstotal=sum(counttemp,1,'omitnan');
    id2=find(sstotal>0);
    if length(id2)>=num
        [~,id_top]=maxk(sstotal,num); %find top cellcount classes
    else
        id_top=id2;
    end
    SS(i).ss=num2str(topSS(i));
    SS(i).topclasses=(class2use(id_top));
    SS(i).filename=filelist(idx);
    SS(i).classcount=counttemp;
    SS(i).MCnum=sum(sum(counttemp,'omitnan'),'omitnan');
end

% add summmary
SS(end+1).ss='all';
sstotal=sum(classcount,1,'omitnan');
[~,id_top]=maxk(sstotal,num); %find top cellcount classes
SS(end).topclasses=sort(class2use(id_top));
SS(end).filename=filelist;
SS(end).classcount=classcount;
SS(end).MCnum=sum(sum(classcount,'omitnan'),'omitnan');

clearvars i idx id_top ss gc sstotal counttemp temp id_t topSS id2 temp

%% plot # annotated files
figure('Units','inches','Position',[1 1 3 3],'PaperPositionMode','auto');   
bar([SS.MCnum],'Barwidth',.5,'linestyle','none'); hold on
set(gca,'xtick',1:length([SS.MCnum]),'xticklabel', {SS.ss},'tickdir','out'); hold on
ylabel('number of annotated images')
xlabel('seascape')

% set figure parameters
print(gcf,'-dpng','-r100',[filepath 'NOAA/SeascapesProject/Figs/AnnotatedImagesperSeascape.png']);
hold off 

%% plot top classes using cells/ml
%remove classes that are not present for plotting
id=NaN*ones(length(SS),length(class2use));
for i=1:length(SS)
    [~,temp]=(ismember(class2use,SS(i).topclasses));
    id(i,:)=double(temp);
end
class2useTop=class2use(sum(id)>0);

id=NaN*ones(length(SS),length(class2useTop));
for i=1:length(SS)
    temp=contains(class2useTop,SS(i).topclasses);  
    id(i,:)=double(temp);
end
[~,class_label ] = get_class_ind(class2useTop,'all', filepath);

figure('Units','inches','Position',[1 1 8 4],'PaperPositionMode','auto');   
plot(1:length(class_label),transpose(id).*(1:length(SS)),'*'); hold on
set(gca,'ycolor','k','ylim',[.8 7.2],'ytick',1:length(SS),'yticklabel',{SS.ss},...
    'xlim',[0 (length(class_label)+1)],'xtick', 1:length(class_label),'xticklabel', class_label,'tickdir','out'); hold on
ylabel('seascape')
title(['Top ' num2str(num) ' classes for each seascape']);

% set figure parameters
print(gcf,'-dpng','-r100',[filepath 'NOAA/SeascapesProject/Figs/topclass_CCS_cellcount_Seascape.png']);
hold off 

%% produce classlists for classifier making
%add back in species for Pseudo-nitzschia, Dinophysis, Chaetoceros, Thalassiosira classes

i=1
idx=contains(SS(i).topclasses,'Dinophysis');
if ~isempty(idx)
    temp={'Dinophysis_acuminata' 'Dinophysis_acuta' 'Dinophysis_caudata'...
        'Dinophysis_fortii' 'Dinophysis_norvegica' 'Dinophysis_odiosa' ...
        'Dinophysis_parva' 'Dinophysis_rotundata' 'Dinophysis_tripos'};
    SS(i).topclasses=[SS(i).topclasses,temp];
else
end
idx=contains(SS(i).topclasses,'Pseudo-nitzschia');
if ~isempty(idx)
    temp={'Pseudo-nitzschia_large_narrow' 'Pseudo-nitzschia_large_wide' 'Pseudo-nitzschia_small'};
    SS(i).topclasses=[SS(i).topclasses,temp];
else
end
idx=contains(SS(i).topclasses,'Thalassiosira');
if ~isempty(idx)
    temp={'Thalassiosira_chain' 'Thalassiosira_single'};
    SS(i).topclasses=[SS(i).topclasses,temp];
else
end


%%
idx=contains(class2use,'Pseudo-nitzschia');
temp=sum(classcount(:,idx),2,'omitnan'); classcount(:,idx)=NaN;
classcount(:,strcmp('Pseudo-nitzschia',class2use))=temp;

idx=contains(class2use,'Chaetoceros');
temp=sum(classcount(:,idx),2,'omitnan'); classcount(:,idx)=NaN;
classcount(:,strcmp('Chaetoceros_chain',class2use))=temp;

idx=contains(class2use,'Thalassiosira');
temp=sum(classcount(:,idx),2,'omitnan'); classcount(:,idx)=NaN;
classcount(:,strcmp('Thalassiosira_chain',class2use))=temp;






